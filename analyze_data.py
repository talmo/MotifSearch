import argparse
import csv
import MotifSearch
import itertools
import operator
import os
from weblogolib import *
from corebio.seq import *

parser = argparse.ArgumentParser(description='Analyze data files generated by MotifSearch iterators.')
parser.add_argument('data_file')
parser.add_argument('-comp')
parser.add_argument('-cons')
parser.add_argument('-seq')
parser.add_argument('-logo')
parser.add_argument('-kl', action="store_true")
parser.add_argument('-html', action="store_true")
args = parser.parse_args()

num_header_rows = 4


def parse_range(iterations):
    if iterations in "all":
        return range(num_iterations)
    else:
        return [item for sublist in [range(int(i_range.split("-")[0]), int(i_range.split("-")[1]) + 1) if "-" in i_range else [int(i_range)] for i_range in iterations.split(",")] for item in sublist]

# Read the data file
with open(args.data_file) as data_file:
    csv_reader = csv.reader(data_file)
    header = [csv_reader.next() for i in range(num_header_rows)]  # Eliminate header rows
    motif_width = int(header[1][3])
    table_headers = header[3]
    # Loop through the file and store in a list
    data = [row for row in csv_reader]
    num_iterations = int(data[-1][0]) + 1
    data_in_iterations = [list(group) for key, group in itertools.groupby(data, operator.itemgetter(0))]

# Compare dataset to original motif
if args.comp:
    original_motif = MotifSearch.read_plain(args.comp)
    iterations_conserved_sites = []
    iteration_size = 0
    for row in data:
        i = int(row[0])
        if i is 0:
            iteration_size += 1
        if row[1] in original_motif:
            try:
                iterations_conserved_sites[i] += 1
            except:
                iterations_conserved_sites.append(1)
    print "Iteration   Conservation (%) | Iteration   Conservation (%)"
    for i, iteration in enumerate(iterations_conserved_sites):
        cell = "%9d   %d/%d (%.2f%%)" % (i, iteration, iteration_size, float(iteration) / iteration_size * 100)
        print cell.ljust(29) + "|",
        if i % 2 is 1 and i is not 0:
            print

# Output Kullback-Leibler divergence for the probability distributions of each iteration
if args.kl:
    kl_values = []
    if not args.html:
        print "Iteration | KL Divergence"
    for iteration, next_iteration in zip(data_in_iterations, data_in_iterations[1:]):
        p = [float(row[3]) for row in next_iteration]
        q = [float(row[3]) for row in iteration]
        kl_values.append(MotifSearch.kl(p, q))
        if not args.html:
            print "%9s | %.3g" % (iteration[0][0] + "->" + next_iteration[0][0], kl_values[-1])

# Compare original motif to iteration inputted
if args.cons:
    original_motif_seqs = [row[1] for row in data_in_iterations[0]]
    compared_motif = data_in_iterations[int(args.cons)]
    print "Iteration 0",
    print ("Iteration %s" % args.cons).rjust(39)
    print "     Pos %s Prob        Pos     %s Prob" % ("Sequence".ljust(motif_width), "Sequence".ljust(motif_width))
    n = 1
    for new_seq in compared_motif:
        if new_seq[1] in original_motif_seqs:
            org_row = data_in_iterations[0][original_motif_seqs.index(new_seq[1])]
            print "%3d. Org %s %.6f == %7s %s %.6f" % (n, org_row[1], float(org_row[3]), new_seq[2], new_seq[1], float(new_seq[3]))
            n += 1
    print "Org = Original motif (from iteration 0)"

# Output iteration sequences to console
if args.seq:
    for i in parse_range(args.seq):
        for row in data:
            if int(row[0]) == i:
                print row[1]

# Render sequence logos
if args.logo:
    # Parse the parameter to figure out which iterations to render
    iterations_to_render = parse_range(args.logo)
    # Generate logo for each iteration entered
    for i in iterations_to_render:
        sequences = SeqList([row[1] for row in data if int(row[0]) == i], unambiguous_dna_alphabet)
        logo_data = LogoData.from_seqs(sequences)
        logo_options = LogoOptions(color_scheme=colorscheme.nucleotide, resolution=192, logo_title="%s: Iteration %d" % (args.data_file, i),
            title_fontsize=6)
        logo_format = LogoFormat(logo_data, logo_options)
        folder = "logos/%s" % os.path.splitext(os.path.basename(args.data_file))[0]
        if not os.path.exists(folder):
            os.makedirs(folder)
        with open("%s/%d.png" % (folder, i), "wb") as logo_file:
            png_formatter(logo_data, logo_format, logo_file)
    print "Generated %d logos." % len(iterations_to_render)

# Generate an html page report
if args.html:
    base_name = os.path.splitext(os.path.basename(args.data_file))[0]
    html_filename = "html/%s.htm" % base_name
    with open(html_filename, "w") as html_file:
        html_file.write("""<html>
    <head>
        <title>%s</title>
        <link rel="stylesheet" type="text/css" href="assets/bootstrap.min.css" />
        <link rel="stylesheet" type="text/css" href="assets/style.css" />
    </head>
    <body>
        <h1>%s</h1>""" % (base_name, base_name))

        # Parameters
        html_file.write("""
        <table class='table table-striped table-bordered table-hover'>
            <tr><th>%s</th><td>%s</td></tr>
            <tr><th>%s</th><td>%s</td></tr>
            <tr><th>%s</th><td>%s</td></tr>
            <tr><th>%s</th><td>%s</td></tr>
            <tr><th>%s</th><td>%s</td></tr>
            <tr><th>%s</th><td>%s</td></tr>
            <tr><th>%s</th><td>%s</td></tr>
        </table>
""" % (header[0][0], header[0][1], header[1][0], header[1][1], header[1][2], header[1][3], header[2][0], header[2][1], header[2][2], header[2][3], header[2][4], header[2][5], header[2][6], header[2][7]))

        # KL Graph
        if args.kl:
            html_file.write("""
        <h3>Kullback-Leibler Divergence</h3>
        <div id="kl-plot"></div>
        <script type="text/javascript">
        kl_data = %s;
        </script>
""" % [[n, val] for n, val in enumerate(kl_values)])

        # Logo checking
        logos_folder = "logos/%s" % base_name
        if os.path.exists(logos_folder):
            logo_files = os.listdir(logos_folder)

        # Iterations
        for i, iteration_rows in enumerate(data_in_iterations):
            html_file.write("       <div class='iteration' id='%d'>\n" % i)
            html_file.write("           <h3>Iteration %d</h3>\n" % i)
            # Output logo if available
            if str(i) + ".png" in logo_files:
                html_file.write("           <img src='../" + logos_folder + "/" + str(i) + ".png'>\n")
            # Output KL if -kl flag as well
            if args.kl:
                if i is not 0:
                    kl_val = kl_values[i - 1]
                    kl_style = ""
                    if kl_val > 0:
                        kl_style = "label-success"
                    elif kl_val < 0:
                        kl_style = "label-important"
                    html_file.write("           <br><span class='label %s'>KL Divergence (%d->%d): %g</span>" % (kl_style, i - 1, i, kl_val))
            # Data table for iteration
            html_file.write("           <table class='table table-striped table-bordered table-hover'>\n")
            html_file.write("               <tr><th>Position</th><th>Sequence</th><th>%s</th></tr>\n" % table_headers[3])
            for row in iteration_rows:
                html_file.write("               <tr><td>%s</td><td class='sequence'>%s</td><td>%s</td></tr>\n" % (row[2], row[1], row[3]))
            html_file.write("           </table>\n")
            html_file.write("       </div>")
        html_file.write("""
        <script src="assets/jquery.js"></script>
        <script src="assets/jquery.flot.js"></script>
        <script src="assets/base.js"></script>
    </body>
</html>""")
    print "HTML generated:", html_filename
